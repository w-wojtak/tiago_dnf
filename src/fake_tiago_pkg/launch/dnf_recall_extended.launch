<launch>
    <!-- ======================================================================================= -->
    <!--                                 CONFIGURATION ARGUMENTS                                 -->
    <!-- ======================================================================================= -->

    <!-- Choose the executive mode: 'simple' or 'tiago' -->
    <arg name="mode" default="simple" doc="Execution mode: 'simple' for fast simulation, 'tiago' for realistic robot control"/>

    <!-- Trial number selector for recall experiments -->
    <arg name="trial_number" default="1" />
    
    <!-- Paths to DNF memory files. 'base' is for shared memory, 'trial' is for adaptive memory. -->
    <arg name="base_data_path" default="$(find fake_tiago_pkg)/data_extended" />
    <arg name="trial_data_path" default="$(find fake_tiago_pkg)/data_extended/trial_$(arg trial_number)" />


    <!-- ======================================================================================= -->
    <!--                             WORLD & VISION SIMULATION (Shared)                          -->
    <!-- ======================================================================================= -->

    <!-- Simulates the world state and AR markers, reacts to pickups -->
    <node name="fake_ar_publisher_node" pkg="fake_tiago_pkg" type="fake_ar_publisher.py" output="screen" />

    <!-- Translates AR markers to simple JSON -->
    <node name="robot_vision_bridge_node" pkg="fake_tiago_pkg" type="robot_vision_bridge.py" output="screen" />
          
    <!-- ======================================================================================= -->
    <!--                             INPUT PROCESSING NODES                                      -->
    <!-- ======================================================================================= -->

    <!-- [CHANGED] This is the new aggregator node that combines all inputs for the DNF. -->
    <node name="vision_to_dnf_aggregator_node" pkg="fake_tiago_pkg" type="vision_to_dnf_aggregator.py" output="screen" />

    <!-- [CHANGED] This is the new voice parser. It turns "give_motor" into "motor". -->
    <node name="voice_command_parser_node" pkg="fake_tiago_pkg" type="voice_command_parser.py" output="screen" />


    <!-- Sends response messages via UDP to Windows TTS -->
    <node name="udp_response_sender" pkg="fake_tiago_pkg" type="udp_response_sender_node.py" output="screen">
        <param name="target_ip" value="192.168.1.45" />
        <param name="target_port" value="5005" />
    </node>

    <!-- ======================================================================================= -->
    <!--                                  DNF RECALL NODE (The Brain)                            -->
    <!-- ======================================================================================= -->
    <node name="dnf_recall_node" pkg="fake_tiago_pkg" type="dnf_model_recall_extended_node.py" output="screen">
        <param name="trial_number" value="$(arg trial_number)" />
        <param name="base_data_path" value="$(arg base_data_path)" />
        <param name="trial_data_path" value="$(arg trial_data_path)" />
        <param name="sequence_memory_path" value="$(arg base_data_path)/u_sm.npy" />
        <param name="duration_field_path"  value="$(arg base_data_path)/u_d.npy" />
    </node>


    <!-- ======================================================================================= -->
    <!--              TASK EXECUTION & ROBOT CONTROL (Select based on 'mode')                     -->
    <!-- ======================================================================================= -->

    <!-- Option 1: SIMPLE executive for fast simulation (default) -->
    <group if="$(eval arg('mode') == 'simple')">
        <node name="simulated_task_executive" pkg="fake_tiago_pkg" type="simulated_task_executive.py" output="screen" />
    </group>

    <!-- Option 2: REALISTIC executive for Tiago integration -->
    <group if="$(eval arg('mode') == 'tiago')">
        <node name="tiago_task_executive" pkg="fake_tiago_pkg" type="tiago_task_executive.py" output="screen" />
        <node name="fake_robot_controller" pkg="fake_tiago_pkg" type="fake_robot_controller.py" output="screen" />
    </group>

</launch>